function [number_metamodel model_data]=check_metamodel(parameters, datamatrix, metamodel,yyyy,mmmm,cl,variable,sim,N)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This function is solving the multivariate quadratic
% regression equation for the different variables  (i.e. from T2M, PR or
% CLCT), and comparing it wiht what is actually simulated by the model for
% one month, at a given year (i.e. returning one number)
% 
%
% Silje Soerland, May 2019.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
const_param;
model_data=squeeze(datamatrix.moddata(yyyy,mmmm,cl,variable,sim)); %% retuning a number for each simulation
model_data_ref=squeeze(datamatrix.refdata(yyyy,mmmm,cl,variable)); %% retuning a number for each simulation


% Compute index vector for all possible pairs
pqn=allcomb(1:N,1:N);
cnt=1;
for i=1:length(pqn)
  if pqn(i,1)>=pqn(i,2)
   cind(cnt)=i;
   cnt=cnt+1;
  end
end
pqn(cind,:)=[];

a=squeeze(metamodel.a(yyyy,mmmm,cl,variable,:)); % linear term for each parameter
BB=squeeze(metamodel.B(yyyy,mmmm,cl,variable,:,:)); %; %% linear and quadratic terms
%B: Metamodel parameter for quadratic and interaction terms
%      [N,N]. Quadratic terms in the diagonal, interaction terms
%      in the off-diagonal. Matrix symetric, B(i,j)=B(j,i).
b=diag(BB); % quadratic terms


PARAM=parameters.experiments; %parametes for each simulations [sim parametrs]


%% The multivariate quadratic regression equation to predict the temperature, precipitation or cloud cover by using the linear and non-linear terms (quadratic and interaction terms)

if N==1
   number_metamodel=model_data_ref + (a(1)*PARAM(sim,1) ...
        + b(1)*PARAM(sim,1)^2); % No interaction terms, just a normal linear regression equation
elseif N==2
     number_metamodel=model_data_ref + (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2  ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)));
    
elseif N==3
    
    number_metamodel=model_data_ref + (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) + a(3)*PARAM(sim,3)  ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2 + b(3)*PARAM(sim,3)^2  ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)) ...
        + BB(pqn(3,1),pqn(3,2))*PARAM(sim,pqn(3,1))*PARAM(sim,pqn(3,2)));
    
elseif N==4
    
    number_metamodel=model_data_ref + (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) + a(3)*PARAM(sim,3) + a(4)*PARAM(sim,4) ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2 + b(3)*PARAM(sim,3)^2 + b(4)*PARAM(sim,4)^2 ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)) ...
        + BB(pqn(3,1),pqn(3,2))*PARAM(sim,pqn(3,1))*PARAM(sim,pqn(3,2)) ...
        + BB(pqn(4,1),pqn(4,2))*PARAM(sim,pqn(4,1))*PARAM(sim,pqn(4,2)));
    
elseif N==5
    
    number_metamodel=model_data_ref + (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) + a(3)*PARAM(sim,3) + a(4)*PARAM(sim,4) + a(5)*PARAM(sim,5) ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2 + b(3)*PARAM(sim,3)^2 + b(4)*PARAM(sim,4)^2 + b(5)*PARAM(sim,5)^2 ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)) ...
        + BB(pqn(3,1),pqn(3,2))*PARAM(sim,pqn(3,1))*PARAM(sim,pqn(3,2)) ...
        + BB(pqn(4,1),pqn(4,2))*PARAM(sim,pqn(4,1))*PARAM(sim,pqn(4,2)) ...
        + BB(pqn(5,1),pqn(5,2))*PARAM(sim,pqn(5,1))*PARAM(sim,pqn(5,2)));

elseif N==6
    
    number_metamodel=model_data_ref ...
        + (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) + a(3)*PARAM(sim,3) + a(4)*PARAM(sim,4) ... 
        + a(5)*PARAM(sim,5) + a(6)*PARAM(sim,6) ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2 + b(3)*PARAM(sim,3)^2 ... 
        + b(4)*PARAM(sim,4)^2 + b(5)*PARAM(sim,5)^2  + b(6)*PARAM(sim,6)^2 ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)) ...
        + BB(pqn(3,1),pqn(3,2))*PARAM(sim,pqn(3,1))*PARAM(sim,pqn(3,2)) ...
        + BB(pqn(4,1),pqn(4,2))*PARAM(sim,pqn(4,1))*PARAM(sim,pqn(4,2)) ...
        + BB(pqn(5,1),pqn(5,2))*PARAM(sim,pqn(5,1))*PARAM(sim,pqn(5,2)) ...
        + BB(pqn(6,1),pqn(6,2))*PARAM(sim,pqn(6,1))*PARAM(sim,pqn(6,2)));
       
    
elseif N==8
    
    number_metamodel=model_data_ref + ...
        (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) + a(3)*PARAM(sim,3) + a(4)*PARAM(sim,4) + a(5)*PARAM(sim,5) ...
        + a(6)*PARAM(sim,6) + a(7)*PARAM(sim,7) + a(8)*PARAM(sim,8) ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2 + b(3)*PARAM(sim,3)^2 + b(4)*PARAM(sim,4)^2 ... 
        + b(5)*PARAM(sim,5)^2 + b(6)*PARAM(sim,6)^2 + b(7)*PARAM(sim,7)^2 + b(8)*PARAM(sim,8)^2 ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)) ...
        + BB(pqn(3,1),pqn(3,2))*PARAM(sim,pqn(3,1))*PARAM(sim,pqn(3,2)) ...
        + BB(pqn(4,1),pqn(4,2))*PARAM(sim,pqn(4,1))*PARAM(sim,pqn(4,2)) ...
        + BB(pqn(5,1),pqn(5,2))*PARAM(sim,pqn(5,1))*PARAM(sim,pqn(5,2)) ...
        + BB(pqn(6,1),pqn(6,2))*PARAM(sim,pqn(6,1))*PARAM(sim,pqn(6,2)) ...
        + BB(pqn(7,1),pqn(7,2))*PARAM(sim,pqn(7,1))*PARAM(sim,pqn(7,2)) ...
        + BB(pqn(8,1),pqn(8,2))*PARAM(sim,pqn(8,1))*PARAM(sim,pqn(8,2)));
    
    
    elseif N==9
    
    number_metamodel=model_data_ref + ...
        (a(1)*PARAM(sim,1) + a(2)*PARAM(sim,2) + a(3)*PARAM(sim,3) + a(4)*PARAM(sim,4) + a(5)*PARAM(sim,5) ...
        + a(6)*PARAM(sim,6) + a(7)*PARAM(sim,7) + a(8)*PARAM(sim,8) + a(9)*PARAM(sim,9) ...
        + b(1)*PARAM(sim,1)^2 + b(2)*PARAM(sim,2)^2 + b(3)*PARAM(sim,3)^2 + b(4)*PARAM(sim,4)^2 ... 
        + b(5)*PARAM(sim,5)^2 + b(6)*PARAM(sim,6)^2 + b(7)*PARAM(sim,7)^2 + b(8)*PARAM(sim,8)^2 + b(9)*PARAM(sim,9)^2 ...
        + BB(pqn(1,1),pqn(1,2))*PARAM(sim,pqn(1,1))*PARAM(sim,pqn(1,2)) ...
        + BB(pqn(2,1),pqn(2,2))*PARAM(sim,pqn(2,1))*PARAM(sim,pqn(2,2)) ...
        + BB(pqn(3,1),pqn(3,2))*PARAM(sim,pqn(3,1))*PARAM(sim,pqn(3,2)) ...
        + BB(pqn(4,1),pqn(4,2))*PARAM(sim,pqn(4,1))*PARAM(sim,pqn(4,2)) ...
        + BB(pqn(5,1),pqn(5,2))*PARAM(sim,pqn(5,1))*PARAM(sim,pqn(5,2)) ...
        + BB(pqn(6,1),pqn(6,2))*PARAM(sim,pqn(6,1))*PARAM(sim,pqn(6,2)) ...
        + BB(pqn(7,1),pqn(7,2))*PARAM(sim,pqn(7,1))*PARAM(sim,pqn(7,2)) ...
        + BB(pqn(8,1),pqn(8,2))*PARAM(sim,pqn(8,1))*PARAM(sim,pqn(8,2)) ...
        + BB(pqn(9,1),pqn(9,2))*PARAM(sim,pqn(9,1))*PARAM(sim,pqn(9,2)));
    
end

if (variable==2 && number_metamodel<0)
    disp('*******************************')
    disp('Nagative Precipitation Predicted')
    display([ regnames{cl} ])
    display(['Year#' num2str(yyyy) ' M#' num2str(mmmm)])
    disp('*******************************')
end
if (variable==2 && model_data<0)
    disp('*******************************')
    disp('Nagative Precipitation Modeled')
    display([regnames{cl}])
    display(['Year#' num2str(yyyy) ' M#' num2str(mmmm)])
    disp('*******************************')
end

    

end